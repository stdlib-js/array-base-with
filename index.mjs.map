{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport slice from '@stdlib/array-base-slice';\nimport resolveSetter from '@stdlib/array-base-resolve-setter';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'map' );\n* // returns true\n*\n* @example\n* var bool = hasMethod( [], 'beep' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n\n// MAIN //\n\n/**\n* Return a new array with the element at the specified index replaced with a provided value.\n*\n* @param {Collection} x - input array\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @throws {RangeError} second argument must not exceed array bounds\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var v = arrayWith( x, 0, 5 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* v = arrayWith( x, 1, 6 );\n* // returns [ 1, 6, 3, 4 ]\n*\n* v = arrayWith( x, -2, 7 );\n* // returns  [ 1, 2, 7, 4 ]\n*/\nfunction arrayWith( x, index, value ) {\n\tvar out;\n\tvar set;\n\tif ( hasMethod( x, 'with' ) ) {\n\t\treturn x.with( index, value );\n\t}\n\tif ( index < 0 ) {\n\t\tindex += x.length;\n\t\tif ( index < 0 ) {\n\t\t\tthrow new RangeError( format( 'null2M', index ) );\n\t\t}\n\t} else if ( index >= x.length ) {\n\t\tthrow new RangeError( format( 'null2M', index ) );\n\t}\n\tout = slice( x, 0, x.length );\n\tset = resolveSetter( out );\n\tset( out, index, value );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default arrayWith;\n"],"names":["arrayWith","x","index","value","out","with","length","RangeError","format","slice","resolveSetter","set"],"mappings":";;gSAyEA,SAASA,EAAWC,EAAGC,EAAOC,GAC7B,IAAIC,EAEJ,GA9BkC,mBA8BlBH,EAAG,QAClB,OAAOA,EAAEI,KAAMH,EAAOC,GAEvB,GAAKD,EAAQ,GAEZ,IADAA,GAASD,EAAEK,QACE,EACZ,MAAM,IAAIC,WAAYC,EAAQ,SAAUN,SAEnC,GAAKA,GAASD,EAAEK,OACtB,MAAM,IAAIC,WAAYC,EAAQ,SAAUN,IAKzC,OAHAE,EAAMK,EAAOR,EAAG,EAAGA,EAAEK,QACfI,EAAeN,EACrBO,CAAKP,EAAKF,EAAOC,GACVC,CACR"}