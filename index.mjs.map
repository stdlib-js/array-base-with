{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport slice from '@stdlib/array-base-slice';\nimport resolveSetter from '@stdlib/array-base-resolve-setter';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'map' );\n* // returns true\n*\n* @example\n* var bool = hasMethod( [], 'beep' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n\n// MAIN //\n\n/**\n* Returns a new array with the element at the specified index replaced with a provided value.\n*\n* @param {Collection} x - input array\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @throws {RangeError} second argument must not exceed array bounds\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var v = arrayWith( x, 0, 5 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* v = arrayWith( x, 1, 6 );\n* // returns [ 1, 6, 3, 4 ]\n*\n* v = arrayWith( x, -2, 7 );\n* // returns  [ 1, 2, 7, 4 ]\n*/\nfunction arrayWith( x, index, value ) {\n\tvar out;\n\tvar set;\n\tif ( hasMethod( x, 'with' ) ) {\n\t\treturn x.with( index, value );\n\t}\n\tindex = normalizeIndex( index, x.length-1 );\n\tif ( index < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%d`.', index ) );\n\t}\n\tout = slice( x, 0, x.length );\n\tset = resolveSetter( out );\n\tset( out, index, value );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default arrayWith;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexDataType from '@stdlib/array-base-assert-is-complex-floating-point-data-type';\nimport isBooleanDataType from '@stdlib/array-base-assert-is-boolean-data-type';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport Boolean from '@stdlib/boolean-ctor';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Copies elements from one array to another array and sets the element at the specified index to a provided value.\n*\n* @private\n* @param {Collection} x - input array\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n* var arr = indexed( x, 0, 5, out, 1, 0 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction indexed( x, index, value, out, stride, offset ) {\n\tvar io;\n\tvar i;\n\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tout[ io ] = x[ i ];\n\t\tio += stride;\n\t}\n\tout[ offset+(index*stride) ] = value;\n\treturn out;\n}\n\n/**\n* Copies elements from one accessor array to another accessor array and sets the element at the specified index to a provided value.\n*\n* @private\n* @param {Object} x - input array object\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), 0, 5, arraylike2object( out ), 1, 0 );\n*\n* var v = arr.get( 0 );\n* // returns 5\n*/\nfunction accessors( x, index, value, out, stride, offset ) {\n\tvar xdata;\n\tvar odata;\n\tvar xget;\n\tvar oset;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\toset( odata, io, xget( xdata, i ) );\n\t\tio += stride;\n\t}\n\toset( odata, offset+(index*stride), value );\n\treturn odata;\n}\n\n/**\n* Copies elements from one complex array to another complex array and sets the element at the specified index to a provided value.\n*\n* @private\n* @param {Collection} x - real-valued floating-point input array view\n* @param {integer} index - element index\n* @param {ComplexLike} value - replacement value\n* @param {Collection} out - real-valued floating-point output array view\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array view\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* var out = new Float64Array( 4 );\n* var arr = complex( x, 0, new Complex128( 5.0, 6.0 ), out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 6.0, 3.0, 4.0 ]\n*/\nfunction complex( x, index, value, out, stride, offset ) {\n\tvar so;\n\tvar io;\n\tvar i;\n\tvar j;\n\n\tso = stride * 2; // multiply by 2, as real-valued array consists of interleaved real and imaginary components\n\tio = offset * 2;\n\tfor ( i = 0; i < x.length/2; i++ ) {\n\t\tj = i * 2;\n\t\tout[ io ] = x[ j ];\n\t\tout[ io+1 ] = x[ j+1 ];\n\t\tio += so;\n\t}\n\tio = ( offset+(index*stride) ) * 2;\n\tout[ io ] = real( value );\n\tout[ io+1 ] = imag( value );\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Copies elements from one array to another array and sets the element at the specified index to a provided value.\n*\n* @param {Collection} x - input array\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @throws {RangeError} second argument must not exceed array bounds\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n* var arr = assign( x, 0, 5, out, 1, 0 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction assign( x, index, value, out, stride, offset ) {\n\tvar xo;\n\tvar oo;\n\n\tindex = normalizeIndex( index, x.length-1 );\n\tif ( index < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%d`.', index ) );\n\t}\n\txo = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( xo.accessorProtocol || oo.accessorProtocol ) {\n\t\t// Note: we only explicitly support a limited set of dtype-to-dtype pairs, as this function should not be concerned with casting rules, etc. That is left to userland...\n\t\tif (\n\t\t\tisComplexDataType( xo.dtype ) &&\n\t\t\tisComplexDataType( oo.dtype ) &&\n\t\t\tisComplexLike( value )\n\t\t) {\n\t\t\tcomplex( reinterpret( x, 0 ), index, value, reinterpret( out, 0 ), stride, offset ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\t\tif (\n\t\t\tisBooleanDataType( xo.dtype ) &&\n\t\t\tisBooleanDataType( oo.dtype )\n\t\t) {\n\t\t\tindexed( reinterpretBoolean( x, 0 ), index, Boolean( value ), reinterpretBoolean( out, 0 ), stride, offset ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\t\taccessors( xo, index, value, oo, stride, offset );\n\t\treturn out;\n\t}\n\tindexed( x, index, value, out, stride, offset );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a new array with the element at the specified index replaced with a provided value.\n*\n* @module @stdlib/array-base-with\n*\n* @example\n* import arrayWith from '@stdlib/array-base-with';\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var v = arrayWith( x, 0, 5 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* v = arrayWith( x, -2, -1 );\n* // returns [ 1, 2, -1, 4 ]\n*\n* @example\n* import arrayWith from '@stdlib/array-base-with';\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n* var arr = arrayWith.assign( x, 0, 5, out, 1, 0 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["arrayWith","x","index","value","out","with","normalizeIndex","length","RangeError","format","slice","resolveSetter","set","indexed","stride","offset","io","i","assign","xo","oo","arraylike2object","accessorProtocol","isComplexDataType","dtype","isComplexLike","so","j","real","imag","complex","reinterpret","isBooleanDataType","reinterpretBoolean","Boolean","xdata","odata","xget","oset","data","accessors","setReadOnly","main"],"mappings":";;k6CA0EA,SAASA,EAAWC,EAAGC,EAAOC,GAC7B,IAAIC,EAEJ,GA9BkC,mBA8BlBH,EAAG,QAClB,OAAOA,EAAEI,KAAMH,EAAOC,GAGvB,IADAD,EAAQI,EAAgBJ,EAAOD,EAAEM,OAAO,IAC3B,EACZ,MAAM,IAAIC,WAAYC,EAAQ,kEAAmEP,IAKlG,OAHAE,EAAMM,EAAOT,EAAG,EAAGA,EAAEM,QACfI,EAAeP,EACrBQ,CAAKR,EAAKF,EAAOC,GACVC,CACR,CC7BA,SAASS,EAASZ,EAAGC,EAAOC,EAAOC,EAAKU,EAAQC,GAC/C,IAAIC,EACAC,EAGJ,IADAD,EAAKD,EACCE,EAAI,EAAGA,EAAIhB,EAAEM,OAAQU,IAC1Bb,EAAKY,GAAOf,EAAGgB,GACfD,GAAMF,EAGP,OADAV,EAAKW,EAAQb,EAAMY,GAAYX,EACxBC,CACR,CAoHA,SAASc,EAAQjB,EAAGC,EAAOC,EAAOC,EAAKU,EAAQC,GAC9C,IAAII,EACAC,EAGJ,IADAlB,EAAQI,EAAgBJ,EAAOD,EAAEM,OAAO,IAC3B,EACZ,MAAM,IAAIC,WAAYC,EAAQ,kEAAmEP,IAIlG,OAFAiB,EAAKE,EAAkBpB,GACvBmB,EAAKC,EAAkBjB,GAClBe,EAAGG,kBAAoBF,EAAGE,iBAG7BC,EAAmBJ,EAAGK,QACtBD,EAAmBH,EAAGI,QACtBC,EAAetB,IA5DlB,SAAkBF,EAAGC,EAAOC,EAAOC,EAAKU,EAAQC,GAC/C,IAAIW,EACAV,EACAC,EACAU,EAIJ,IAFAD,EAAc,EAATZ,EACLE,EAAc,EAATD,EACCE,EAAI,EAAGA,EAAIhB,EAAEM,OAAO,EAAGU,IAC5BU,EAAQ,EAAJV,EACJb,EAAKY,GAAOf,EAAG0B,GACfvB,EAAKY,EAAG,GAAMf,EAAG0B,EAAE,GACnBX,GAAMU,EAGPtB,EADAY,EAAiC,GAA1BD,EAAQb,EAAMY,IACTc,EAAMzB,GAClBC,EAAKY,EAAG,GAAMa,EAAM1B,EAErB,CA4CG2B,CAASC,EAAa9B,EAAG,GAAKC,EAAOC,EAAO4B,EAAa3B,EAAK,GAAKU,EAAQC,GACpEX,GAGP4B,EAAmBb,EAAGK,QACtBQ,EAAmBZ,EAAGI,QAEtBX,EAASoB,EAAoBhC,EAAG,GAAKC,EAAOgC,EAAS/B,GAAS8B,EAAoB7B,EAAK,GAAKU,EAAQC,GAC7FX,IAnHV,SAAoBH,EAAGC,EAAOC,EAAOC,EAAKU,EAAQC,GACjD,IAAIoB,EACAC,EACAC,EACAC,EACAtB,EACAC,EASJ,IAPAkB,EAAQlC,EAAEsC,KACVH,EAAQhC,EAAImC,KAEZF,EAAOpC,EAAEuC,UAAW,GACpBF,EAAOlC,EAAIoC,UAAW,GAEtBxB,EAAKD,EACCE,EAAI,EAAGA,EAAIkB,EAAM5B,OAAQU,IAC9BqB,EAAMF,EAAOpB,EAAIqB,EAAMF,EAAOlB,IAC9BD,GAAMF,EAEPwB,EAAMF,EAAOrB,EAAQb,EAAMY,EAASX,EAErC,CAgGEqC,CAAWrB,EAAIjB,EAAOC,EAAOiB,EAAIN,EAAQC,GAClCX,IAERS,EAASZ,EAAGC,EAAOC,EAAOC,EAAKU,EAAQC,GAChCX,EACR,CChKAqC,EAAAC,EAAA,SAAAxB"}