{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar slice = require( '@stdlib/array-base-slice' );\nvar resolveSetter = require( '@stdlib/array-base-resolve-setter' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'map' );\n* // returns true\n*\n* @example\n* var bool = hasMethod( [], 'beep' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n\n// MAIN //\n\n/**\n* Returns a new array with the element at the specified index replaced with a provided value.\n*\n* @param {Collection} x - input array\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @throws {RangeError} second argument must not exceed array bounds\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var v = arrayWith( x, 0, 5 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* v = arrayWith( x, 1, 6 );\n* // returns [ 1, 6, 3, 4 ]\n*\n* v = arrayWith( x, -2, 7 );\n* // returns [ 1, 2, 7, 4 ]\n*/\nfunction arrayWith( x, index, value ) {\n\tvar out;\n\tvar set;\n\tif ( hasMethod( x, 'with' ) ) {\n\t\treturn x.with( index, value );\n\t}\n\tindex = normalizeIndex( index, x.length-1 );\n\tif ( index < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%d`.', index ) );\n\t}\n\tout = slice( x, 0, x.length );\n\tset = resolveSetter( out );\n\tset( out, index, value );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = arrayWith;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplexDataType = require( '@stdlib/array-base-assert-is-complex-floating-point-data-type' );\nvar isBooleanDataType = require( '@stdlib/array-base-assert-is-boolean-data-type' );\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar Boolean = require( '@stdlib/boolean-ctor' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar real = require( '@stdlib/complex-float64-real' );\nvar imag = require( '@stdlib/complex-float64-imag' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Copies elements from one array to another array and sets the element at the specified index to a provided value.\n*\n* @private\n* @param {Collection} x - input array\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n* var arr = indexed( x, 0, 5, out, 1, 0 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction indexed( x, index, value, out, stride, offset ) {\n\tvar io;\n\tvar i;\n\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tout[ io ] = x[ i ];\n\t\tio += stride;\n\t}\n\tout[ offset+(index*stride) ] = value;\n\treturn out;\n}\n\n/**\n* Copies elements from one accessor array to another accessor array and sets the element at the specified index to a provided value.\n*\n* @private\n* @param {Object} x - input array object\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), 0, 5, arraylike2object( out ), 1, 0 );\n*\n* var v = arr.get( 0 );\n* // returns 5\n*/\nfunction accessors( x, index, value, out, stride, offset ) {\n\tvar xdata;\n\tvar odata;\n\tvar xget;\n\tvar oset;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\toset( odata, io, xget( xdata, i ) );\n\t\tio += stride;\n\t}\n\toset( odata, offset+(index*stride), value );\n\treturn odata;\n}\n\n/**\n* Copies elements from one complex array to another complex array and sets the element at the specified index to a provided value.\n*\n* @private\n* @param {Collection} x - real-valued floating-point input array view\n* @param {integer} index - element index\n* @param {ComplexLike} value - replacement value\n* @param {Collection} out - real-valued floating-point output array view\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array view\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* var out = new Float64Array( 4 );\n* var arr = complex( x, 0, new Complex128( 5.0, 6.0 ), out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 6.0, 3.0, 4.0 ]\n*/\nfunction complex( x, index, value, out, stride, offset ) {\n\tvar so;\n\tvar io;\n\tvar i;\n\tvar j;\n\n\tso = stride * 2; // multiply by 2, as real-valued array consists of interleaved real and imaginary components\n\tio = offset * 2;\n\tfor ( i = 0; i < x.length/2; i++ ) {\n\t\tj = i * 2;\n\t\tout[ io ] = x[ j ];\n\t\tout[ io+1 ] = x[ j+1 ];\n\t\tio += so;\n\t}\n\tio = ( offset+(index*stride) ) * 2;\n\tout[ io ] = real( value );\n\tout[ io+1 ] = imag( value );\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Copies elements from one array to another array and sets the element at the specified index to a provided value.\n*\n* @param {Collection} x - input array\n* @param {integer} index - element index\n* @param {*} value - replacement value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @throws {RangeError} second argument must not exceed array bounds\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n* var arr = assign( x, 0, 5, out, 1, 0 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction assign( x, index, value, out, stride, offset ) {\n\tvar xo;\n\tvar oo;\n\n\tindex = normalizeIndex( index, x.length-1 );\n\tif ( index < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%d`.', index ) );\n\t}\n\txo = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( xo.accessorProtocol || oo.accessorProtocol ) {\n\t\t// Note: we only explicitly support a limited set of dtype-to-dtype pairs, as this function should not be concerned with casting rules, etc. That is left to userland...\n\t\tif (\n\t\t\tisComplexDataType( xo.dtype ) &&\n\t\t\tisComplexDataType( oo.dtype ) &&\n\t\t\tisComplexLike( value )\n\t\t) {\n\t\t\tcomplex( reinterpret( x, 0 ), index, value, reinterpret( out, 0 ), stride, offset ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\t\tif (\n\t\t\tisBooleanDataType( xo.dtype ) &&\n\t\t\tisBooleanDataType( oo.dtype )\n\t\t) {\n\t\t\tindexed( reinterpretBoolean( x, 0 ), index, Boolean( value ), reinterpretBoolean( out, 0 ), stride, offset ); // eslint-disable-line max-len\n\t\t\treturn out;\n\t\t}\n\t\taccessors( xo, index, value, oo, stride, offset );\n\t\treturn out;\n\t}\n\tindexed( x, index, value, out, stride, offset );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a new array with the element at the specified index replaced with a provided value.\n*\n* @module @stdlib/array-base-with\n*\n* @example\n* var arrayWith = require( '@stdlib/array-base-with' );\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var v = arrayWith( x, 0, 5 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* v = arrayWith( x, -2, -1 );\n* // returns [ 1, 2, -1, 4 ]\n*\n* @example\n* var arrayWith = require( '@stdlib/array-base-with' );\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n* var arr = arrayWith.assign( x, 0, 5, out, 1, 0 );\n* // returns [ 5, 2, 3, 4 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "slice", "resolveSetter", "normalizeIndex", "format", "hasMethod", "obj", "method", "arrayWith", "x", "index", "value", "out", "set", "require_assign", "__commonJSMin", "exports", "module", "isComplexDataType", "isBooleanDataType", "isComplexLike", "Boolean", "arraylike2object", "reinterpret", "reinterpretBoolean", "normalizeIndex", "real", "imag", "format", "indexed", "x", "index", "value", "out", "stride", "offset", "io", "accessors", "xdata", "odata", "xget", "oset", "i", "complex", "so", "j", "assign", "xo", "oo", "setReadOnly", "main", "assign"]
}
